5.10 Definitions

1. Polymorphism refers to type variables which may refer to more
than one concrete type. In Haskell, this will usually manifest as
parametric or ad-hoc polymorphism. By having a larger set of
types, we intersect the commonalities of them all to produce a
smaller set of correct terms. This makes it less likely we’ll write
an incorrect program and lets us reuse the code with other types.

2. With respect to Haskell, the principal type is the most generic
type which still typechecks. More generally, Principal type is a
property of the type system you’re interacting with. Principal
typing holds for that type system if a type can be found for a
term in an environment for which all other types for that term
are instances of the principal type. Here are some examples:
-- Given the inferred types
a
Num a => a
Int
-- The principal type here is the
-- parametrically polymorphic 'a'.
-- Given these types
(Ord a, Num a) => a
Integer
-- The principal type is
-- (Ord a, Num a) => a

3. Type inference is a faculty some programming languages, most
notably Haskell and ML, have to infer principal types from terms
without needing explicit type annotations. There are, in some
cases, terms in Haskell which can be well-typed but which have
no principal type. In those cases, an explicit type annotation
must be added.

4. Type variable is a way to refer to an unspecified type or set of
types in Haskell type signatures. Type variables ordinarily will be
equal to themselves throughout a type signature. Let us consider
some examples.